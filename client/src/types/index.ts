/**
 * MindPath TypeScript Type Definitions
 * 
 * This file contains all TypeScript interfaces and types used throughout
 * the MindPath application. It provides type safety for API responses,
 * component props, and data structures.
 * 
 * @author MindPath Development Team
 * @version 1.0.0
 */

/**
 * Note Data Structure
 * 
 * Represents a personal note created by the user.
 */
export interface Note {
  note_id: number;        // Unique identifier for the note
  title: string;          // Note title
  content: string;        // Note content/body
  last_updated: string;   // ISO 8601 timestamp of last modification
}

/**
 * Create Note Request
 * 
 * Data structure for creating a new note.
 */
export interface CreateNoteRequest {
  title: string;    // Note title (required)
  content: string;  // Note content (required)
}

/**
 * Update Note Request
 * 
 * Data structure for updating an existing note.
 * All fields are optional for partial updates.
 */
export interface UpdateNoteRequest {
  title?: string;   // New note title (optional)
  content?: string; // New note content (optional)
}

/**
 * Generic API Response
 * 
 * Standard response structure for all API endpoints.
 * Uses generics to support different data types.
 */
export interface ApiResponse<T> {
  message: string;              // Human-readable response message
  note?: T;                     // Single note object (for create/update/get operations)
  notes?: T[];                  // Array of notes (for list operations)
  count?: number;               // Number of items returned
  result?: any;                 // Generic result data
  shouldTriggerAnalysis?: boolean; // Whether automatic analysis should be triggered
}

/**
 * API Error Response
 * 
 * Standard error response structure for API failures.
 */
export interface ApiError {
  error: string;    // Error type/category
  message: string;  // Human-readable error message
}

/**
 * Mental Health Resource
 * 
 * Represents a resource generated by AI analysis to help with mental health.
 */
export interface MentalHealthResource {
  title: string;       // Resource title
  description: string; // Resource description
  type: 'article' | 'exercise' | 'technique' | 'tool' | 'analysis'; // Resource type
  url?: string;        // Optional URL to external resource
}

/**
 * AI Analysis Result
 * 
 * Contains the results of AI-powered analysis of user notes.
 */
export interface AnalysisResult {
  analysis: string;                    // Detailed analysis text
  resources: MentalHealthResource[];   // Generated mental health resources
  recommendations: string;             // Personalized recommendations
}

/**
 * Analysis Log Entry
 * 
 * Represents a stored analysis result in the database.
 */
export interface AnalysisLog {
  log_id: number;                                    // Unique log identifier
  user_id: string;                                   // Auth0 user identifier
  analysis_type: string;                             // Type of analysis performed
  notes_analyzed: Array<{ id: number; title: string }>; // Notes that were analyzed
  generated_resources: AnalysisResult;               // AI-generated analysis results
  created_at: string;                                // ISO 8601 timestamp of creation
  trigger_type: 'manual' | 'automatic';             // How analysis was triggered
}

/**
 * Analysis API Response
 * 
 * Response structure for the analyze-notes API endpoint.
 */
export interface AnalysisResponse {
  message: string;        // Response message
  analysis: AnalysisResult; // Analysis results
  logId: number;          // ID of the created analysis log
  notesAnalyzed: number;  // Number of notes that were analyzed
}

/**
 * Analysis Logs API Response
 * 
 * Response structure for the analysis-logs API endpoint.
 */
export interface AnalysisLogsResponse {
  message: string;    // Response message
  count: number;      // Number of analysis logs returned
  logs: AnalysisLog[]; // Array of analysis log entries
}
